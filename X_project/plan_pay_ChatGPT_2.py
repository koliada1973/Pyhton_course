from datetime import datetime
import calendar

def to_cents(x: float) -> int:
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É –∫–æ–ø—ñ–π–∫–∏ (int)."""
    return int(round(x * 100))

def from_cents(x: int) -> float:
    """–ù–∞–∑–∞–¥ —É –≥—Ä–∏–≤–Ω—ñ."""
    return x / 100.0


def simulate_schedule_with_interest_debt(principal, daily_rate, months, start_date, pay_day, payment):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ª–∏—à–æ–∫ (—Ç—ñ–ª–æ + –±–æ—Ä–≥ –ø–æ –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö) —É –∫–æ–ø—ñ–π–∫–∞—Ö."""
    current_date = datetime.strptime(start_date, "%Y-%m-%d")
    balance = to_cents(principal)
    interest_debt = 0

    for m in range(1, months + 1):
        # –î–∞—Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
        year, month = current_date.year, current_date.month
        month += 1
        if month > 12:
            month = 1
            year += 1
        last_day = calendar.monthrange(year, month)[1]
        pay_date = datetime(year, month, min(pay_day, last_day))

        # –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –≤—ñ–¥—Å–æ—Ç–∫–∏ (–ø—Ä–æ—Å—Ç–∞ —Å—Ç–∞–≤–∫–∞)
        days = (pay_date - current_date).days
        interest = to_cents(from_cents(balance) * daily_rate * days)

        pay_remaining = payment

        # 1. –ü–æ–≥–∞—à–µ–Ω–Ω—è –±–æ—Ä–≥—É –ø–æ –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        if pay_remaining >= interest_debt:
            pay_remaining -= interest_debt
            interest_debt = 0
        else:
            interest_debt -= pay_remaining
            pay_remaining = 0

        # 2. –ü–æ–≥–∞—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤
        if pay_remaining >= interest:
            pay_remaining -= interest
        else:
            interest_debt += (interest - pay_remaining)
            pay_remaining = 0

        # 3. –ü–æ–≥–∞—à–µ–Ω–Ω—è —Ç—ñ–ª–∞
        balance -= pay_remaining

        current_date = pay_date

    return balance + interest_debt


def annuity_payment_iterative_with_interest_debt(principal, daily_rate, months, start_date, pay_day, tol=1, max_iter=200):
    """
    –ü—ñ–¥–±–∏—Ä–∞—î –ø–ª–∞—Ç—ñ–∂ —Ç–∞–∫, —â–æ–± —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –±—É–≤ <= 0.
    –£—Å—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ —É –∫–æ–ø—ñ–π–∫–∞—Ö (tol=1 ‚Üí —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–æ 1 –∫–æ–ø—ñ–π–∫–∏).
    """
    low, high = 0, to_cents(principal) * 2
    payment = (low + high) // 2

    for _ in range(max_iter):
        final_total = simulate_schedule_with_interest_debt(principal, daily_rate, months, start_date, pay_day, payment)

        if -tol <= final_total <= tol:
            break
        if final_total > 0:  # –∑–∞–ª–∏—à–æ–∫ > 0 ‚Üí –ø–ª–∞—Ç—ñ–∂ –º–∞–ª–∏–π
            low = payment
        else:               # –∑–∞–ª–∏—à–æ–∫ < 0 ‚Üí –ø–ª–∞—Ç—ñ–∂ –∑–∞–≤–µ–ª–∏–∫–∏–π
            high = payment

        payment = (low + high) // 2

    # üîπ –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ –±–æ—Ä–≥ –ø–æ–≥–∞—à–µ–Ω–∏–π (–∑–∞–ª–∏—à–æ–∫ ‚â§ 0)
    final_total = simulate_schedule_with_interest_debt(principal, daily_rate, months, start_date, pay_day, payment)
    if final_total > 0:
        payment += 1  # –¥–æ–¥–∞—î–º–æ 1 –∫–æ–ø—ñ–π–∫—É

    # –ë—É–¥—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫
    schedule = []
    current_date = datetime.strptime(start_date, "%Y-%m-%d")
    balance = to_cents(principal)
    interest_debt = 0

    for m in range(1, months + 1):
        year, month = current_date.year, current_date.month
        month += 1
        if month > 12:
            month = 1
            year += 1
        last_day = calendar.monthrange(year, month)[1]
        pay_date = datetime(year, month, min(pay_day, last_day))

        days = (pay_date - current_date).days
        interest = to_cents(from_cents(balance) * daily_rate * days)
        pay_remaining = payment

        # 1. –ë–æ—Ä–≥ –ø–æ –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        if pay_remaining >= interest_debt:
            paid_interest_debt = interest_debt
            pay_remaining -= interest_debt
            interest_debt = 0
        else:
            paid_interest_debt = pay_remaining
            interest_debt -= pay_remaining
            pay_remaining = 0

        # 2. –ü–æ—Ç–æ—á–Ω—ñ –≤—ñ–¥—Å–æ—Ç–∫–∏
        if pay_remaining >= interest:
            paid_interest = interest
            pay_remaining -= interest
        else:
            paid_interest = pay_remaining
            interest_debt += (interest - pay_remaining)
            pay_remaining = 0

        # 3. –¢—ñ–ª–æ
        paid_principal = pay_remaining
        balance -= paid_principal

        schedule.append({
            "‚Ññ": m,
            "–î–∞—Ç–∞": pay_date.strftime("%Y-%m-%d"),
            "–î–Ω—ñ–≤": days,
            "–ü–ª–∞—Ç—ñ–∂": from_cents(payment),
            "–í—ñ–¥—Å–æ—Ç–∫–∏ (–ø–æ—Ç–æ—á–Ω—ñ)": from_cents(interest),
            "–ü–æ–≥–∞—à–µ–Ω–æ –±–æ—Ä–≥—É –ø–æ %": from_cents(paid_interest_debt),
            "–ü–æ–≥–∞—à–µ–Ω–æ –ø–æ—Ç–æ—á–Ω–∏—Ö %": from_cents(paid_interest),
            "–ù–µ–¥–æ–ø–ª–∞—Ç–∞ %": from_cents(interest_debt),
            "–¢—ñ–ª–æ": from_cents(paid_principal),
            "–ó–∞–ª–∏—à–æ–∫ —Ç—ñ–ª–∞": from_cents(balance),
            "–ó–∞–≥–∞–ª—å–Ω–∏–π –±–æ—Ä–≥": from_cents(balance + interest_debt)
        })

        current_date = pay_date

    return from_cents(payment), schedule


# üîπ –¢–µ—Å—Ç
principal = 10000
daily_rate = 0.0005  # 0.05% –Ω–∞ –¥–µ–Ω—å
months = 360
start_date = "2025-08-20"
pay_day = 25

payment, schedule = annuity_payment_iterative_with_interest_debt(principal, daily_rate, months, start_date, pay_day)

print(f"–ü—ñ–¥—ñ–±—Ä–∞–Ω–∏–π —â–æ–º—ñ—Å—è—á–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ ‚âà {payment:.2f} –≥—Ä–Ω\n")
print("–ì—Ä–∞—Ñ—ñ–∫:")
for row in schedule:
    print(row)